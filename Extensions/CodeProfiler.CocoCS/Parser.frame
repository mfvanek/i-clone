/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin
using System;
#region code for profiler
using System.CodeDom.Compiler;
using at.jku.ssw.ProfIt.Components;
#endregion

-->namespace

public class Parser {
-->constants
#region code for profiler
  CounterCollection counters = new CounterCollection();

  BasicBlock curBlock;
  ClassCounter curClass;
  // this is necessary for the number of statements
  MethodBlock curMethod;
  // number of inserted characters (like braces)
  int charInsertCount = 0; 
  // we start in the global namespace
  string  fullCurrentNamespaceName = "";
#endregion

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

-->declarations

	public Parser(Scanner scanner, string compilerOptions) {
		this.scanner = scanner;
		errors = new Errors();
		ProcessParameters( compilerOptions );
	}
	
	private void ProcessParameters( string compilerOptions ) {
    int searchPos = 0;
	  
	  // add "/define:"s to the ccs list of scanner
    while( searchPos < compilerOptions.Length ) {
      int foundPos = compilerOptions.IndexOf( "/define:", searchPos );

      if( foundPos == -1 ) {
	      break;  
	    }
      searchPos = foundPos + 1;

      int defNamesPos = foundPos + "/define:".Length;
	    // either a space or end of string
	    int  endOfOption = compilerOptions.IndexOf( " ", defNamesPos );
      string defineStr;

      if( endOfOption == -1 ) {
        defineStr = compilerOptions.Substring( defNamesPos );
      }
      else {
        defineStr = compilerOptions.Substring( defNamesPos, endOfOption - defNamesPos );
      }
	    
	    // multiple defines are separated by ";"
	    string[] defines = defineStr.Split( new Char[] { ';' } );
	    
	    foreach( string define in defines ) {
	      ccs.Add( define );
	    }
	  }
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
			  switchTokenContext();
			  ++errDist; break;
			}
-->pragmas
			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
-->productions

#region code for profiler
	public CounterCollection Parse() {
#endregion

		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
    Expect(0);
    
#region code for profiler
    return counters;
#endregion
	}
	
	static readonly bool[,] set = {
-->initialization
	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
  public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
  
	public void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}

$$$